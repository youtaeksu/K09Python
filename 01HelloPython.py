# 라인단위 주석은 #(샵)을 이용한다.
'''
파일명 : 01HelloPython.py
블럭단위 주석은 싱글쿼테이션을 3개 연결해서 사용한다.
'''

'''문장을 적당히 쓰세요.
그리고 주석설정을 해봅시다. 블럭으로 문장을 감싼 후 
싱글을 3번 입력해주세요.'''

# 파이썬은 문장의 끝에 ;(세미콜론)을 사용하지 않는다.
print("Hello Python")
# 한줄에 여러 명령을 쓰는 경우 구분을 위해 ;이 필요하다.
print("한줄에 "); print("여러줄 쓰려면 "); print("세미콜론이 필요함")


print("===============================")
print("여러 변수 선언")
print("===============================")
# 좌측항은 변수, 우측항은 할당한 값으로 구분하여 선언 및 초기화한다.
# 또한 자료형을 기술하지 않아도 된다. 값이 초기화될때 자동으로 자료형이 결정된다.
r, g, b = "Red", "Green", "Blue"
# 여러개의 변수를 출력할때는 콤마를 통해 구분하면 된다.
print(r, g, b)


print("===============================")
print("정수형")
print("===============================")
# 파이썬은 변수 선언시 별도의 데이터형을 붙이지 않는다.
x = 2
y = 4
z = 8

# 나누기. 항상 float형 결과를 반환한다.
print("x / y", x / y) #결과 : 0.5
print("z / y", z / y) #결과 : 2.0
# 나누기. 소수부분을 제거하므로 항상 int형의 결과를 반환한다.
print("x // y", x // y) #결과 : 0
# 곱셈
print("x * y", x * y)
# 거듭제곱. 2의 4승을 계산하여 출력한다.
print("x ** y", x ** y)
# 거듭제곱을 함수를 통해 실행한다.
print("pow(x, y)", pow(x, y))
# 2의 4승을 8로 나는 나머지를 반환한다.
print("pow(x, y, z)", pow(x, y, z))
# x를 y로 나눈 몫과 나머지를 튜플로 반환한다.
print("divmod(x, y)", divmod(x, y))

# import는 모듈을 불러올때 사용하는 명령으로 math모듈을 사용한다는 의미이다.
# Java에서는 class라고 표현하지만 Python에서는 모듈이라 표현한다.
import math
# 팩토리얼 함수이므로 5*4*3*2*1의 결과를 출력한다.
print("math.factorial(5)", math.factorial(5))

print("===============================")
print("String형")
print("===============================")
str = """아래와 같이
여러줄에 걸쳐 문자열을 작성하고 싶으면
이와같이 더블쿼테이션을 3개 작성한다.
"""
print(str)

head = "나는 헤더 "
bottom = "나는 보텀"
# 문자열 합치기
print(head + bottom)
# 문자열 반복하기 (곱셈기호를 사용한다. )
print(head * 3)

# 문자열 슬라이싱 : 인덱스와 범위를 통해 문자열을 잘라낼 수 있다.
engStr = "Hello Python Good"
# 0번 인덱스 : H
print(engStr[0])
# 0~3까지의 범위에서 3앞까지만 가져온다. (0~2까지) : Hel
print(engStr[:3])
# 1~2까지만 슬라이싱 한다. : el
print(engStr[1:3])
# 1~마지막까지 슬라이싱 한다.
print(engStr[1:])

korStr = "안녕하세요? 파이썬입니다."
# 0번 인덱스 : 안
print(korStr[0])
# 안녕
print(korStr[:2])
# 안녕하세요?
print(korStr[0:6])
#Python에서는 한글도 인덱스를 통해 정확히 슬라이싱 할수있다.


'''
format()
    : 문자열을 format()함수를 사용하면 좀 더 발전된 스타일로
    문자열 포맷을 지정할 수 있다.
    형식] format(0번인덱스, 1번인덱스, .... n번인덱스)
        사용시에는 {인덱스} 와 같이 사용한다.
'''

print("{0}는 중복되지않는 숫자 {1}개로 구성된다".format("Lotto", 6))
print("{1}는 중복되지않는 숫자 {0}개로 구성된다".format("Lotto", 6))

# 인덱스 대신 변수를 사용하는 방법으로 default값을 지정하는 경우 "변수명=값"으로 사용한다.
menu1 = "치킨"
menu2 = "맥주"
print("오늘 {str}은 {0}과 {1}로 정했다".format(menu1, menu2, str="저녁"))